{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","map","SearchBox","placeholder","handleChange","type","onChange","App","state","monsters","searchField","fetch","then","response","json","users","setState","this","console","log","filterdMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,kCAAMN,EAAMI,QAAQG,MAApB,WCJKC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SAEQD,EAAMI,QAAQK,KAAI,SAAAL,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLpDK,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC6BHG,G,wDA/Bb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,SAAU,GACVC,YAAc,IALJ,E,qDASd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACP,SAAUM,S,oBAG5C,WAAW,IAAD,OACR,EAAgCE,KAAKT,MAA9BC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,YACjBQ,QAAQC,IAAIV,GACZ,IAAMW,EAAkBX,EAASY,QAAO,SAAAzB,GAAO,OAC7CA,EAAQE,KAAKwB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK7B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWU,YAAY,oBAAoBC,aAAc,SAAAoB,GAAC,OAAI,EAAKR,SAAS,CAACN,YAAac,EAAEC,OAAOC,WACnG,cAAC,EAAD,CAAU9B,QAASwB,W,GA1BTO,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7e5cd5c4.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.style.css';\n\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h1>{props.monster.name}</h1>\n        <p> { props.monster.email } </p>\n    </div>\n)","import React from 'react';\nimport './card-list.style.css';\nimport  { Card } from '../card/card.component';\n\nexport const CardList = (props) => {\n    return (\n        <div className='card-list'> \n            {\n                props.monster.map(monster => (<Card key={monster.id} monster={monster}/>))\n            } \n        </div>\n    );\n}","import React from 'react';\nimport './search-box.style.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input \n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}/>\n)","import React, { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField : ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}));\n  }\n\n  render () {\n    const {monsters, searchField} = this.state;\n    console.log(monsters);\n    const filterdMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='search monster...' handleChange={e => this.setState({searchField: e.target.value})} />\n        <CardList monster={filterdMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}